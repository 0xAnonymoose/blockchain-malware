import bep20 from './abi-bep20.mjs';
import fetch from 'node-fetch';
import { _loadCache, _saveCache, web3 } from './utils.mjs';

export async function getTxnByAccount(acct, firstBlock, endBlock, cache = true) {

  // check Cache
  let cname = 'cache/transactions_'+acct+'_'+firstBlock+'_'+endBlock+'.json';
  if (cache) {
    let cdata = _loadCache(cname);
    if (cdata != null) { return cdata; }
  }
  
  // make request
  let url = 'https://api.bscscan.com/api?module=account&action=txlist'
     + '&address='+acct
     + '&startblock='+firstBlock+'&endblock='+endBlock+'&sort=desc&apikey='+process.env.BSCSCAN_API_KEY;
   
  let d = await fetch(url);
  let j = await d.json();

  // if successful, cache and return
  if (j.status != '1') {
    console.error(acct,j);
    return [];
  } else {
    if (cache) { _saveCache(cname, j.result); }
    return j.result;
  }

}

export async function contractInfo(addr) {
  // check Cache
  let cname = 'cache/contractInfo_'+addr+'.json';
  let cdata = _loadCache(cname);
  if (cdata != null) { return cdata; }
  
  const token_abi = await new web3.eth.Contract( bep20, addr );
  let r;
  try {
    r = {
      contractAddress: addr,
      totalSupply: await token_abi.methods.totalSupply().call(),
      symbol: await token_abi.methods.symbol().call(),
      name: await token_abi.methods.name().call(),
      decimals: await token_abi.methods.decimals().call()
    }
  }catch(err) {
    r = {err};
  }
  
  _saveCache(cname, r);
  return r;
}

