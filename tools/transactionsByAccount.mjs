import fetch from 'node-fetch';
import {setTimeout} from "timers/promises";
import bep20 from './abi-bep20.mjs';

import Web3 from 'web3';
const web3 = new Web3("https://bsc-dataseed1.binance.org");

async function getTxnByAccount(acct) {

let url = 'https://api.bscscan.com/api?module=account&action=txlist'
   + '&address='+acct
   + '&startblock=18000000&endblock=20000000&sort=desc&apikey='+process.env.BSCSCAN_API_KEY;
   
let d = await fetch(url);
let j = await d.json();

if (j.status != '1') {
console.error(acct,j);
return [];
} else {
return j.result;
}

}

const root = '0x8bc50c1d90109d2603e51498b419f9cd499b8280';
const exchange1 = '0x635308e731a878741bfec299e67f5fd28c7553d9';
const exchange2 = '0x2d964ee844c35a72c6a9d498d54c8a9910cf6914';

let targets = [];
let visited = [root, exchange1, exchange2];

targets.push(process.argv[2]);

async function contractInfo(addr) {
  const token_abi = await new web3.eth.Contract( bep20, addr );
  let r;
  try {
    r = {
      contractAddress: addr,
      totalSupply: await token_abi.methods.totalSupply().call(),
      symbol: await token_abi.methods.symbol().call(),
      name: await token_abi.methods.name().call(),
      decimals: await token_abi.methods.decimals().call()
    }
  }catch(err) {
    r = {err};
  }
  return r;
}

let total_value = BigInt(0);
  
while (targets.length > 0) {

  let target = targets.pop();
  visited.push(target);

  let txn = await getTxnByAccount(target);
  if (txn.length < 4) {
    console.log('Chain broken dead end', target);
    continue;
  }
  
  if (txn[0].from == target && txn[txn.length-1].to == target) {
    let cfrom = txn[txn.length-1].from;
    let cto = txn[0].to;

    console.log('Chain detected block', txn[0].blockNumber, 'address', target);    
    console.log('  From', cfrom, '   To', cto);
    
    if (cfrom == root) {     console.info('  >>> CHAIN STARTS FROM ROOT!');  }
    if (cto == root)   {     console.info('  >>> CHAIN ENDS AT ROOT!');      }
    
    if (!visited.includes(cto)   && !targets.includes(cto))   { targets.push(cto); }
    if (!visited.includes(cfrom) && !targets.includes(cfrom)) { targets.push(cfrom); }
    
    let scamToken = null;
    
    for (let t of txn) {
      if (t.to=='') { 
         let info = await contractInfo(t.contractAddress);    
         if (info.name) { scamToken = info; scamToken.txn = t; }
         console.log('  Malware Contract:', t.contractAddress, 'length', t.input.length,'info', info.name, info.symbol, info.decimals, info.totalSupply );
      }
    }

    let value = BigInt(txn[0].value) - BigInt(txn[txn.length-1].value);
    total_value += value;
    console.log('  Scam Value:', web3.utils.fromWei(value.toString()));
    
    if (scamToken) {
        let row = [target, scamToken.contractAddress,
                   scamToken.txn.blockNumber, scamToken.txn.input.length,
                   scamToken.name, scamToken.symbol, scamToken.decimals, scamToken.totalSupply,
                   web3.utils.fromWei(value.toString())];
        console.error(row.join(','));
    }
  } else {
    console.log('Chain broken hit trunk?', target);
  }
  
  //await setTimeout(500);
}

console.log('Total value:', web3.utils.fromWei(total_value.toString()));
